name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: Build/Test/Audit (Node 22)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      - name: Install
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Format Check
        run: npm run format:check
      - name: Test (coverage)
        run: npm run test:ci
        env:
          NODE_OPTIONS: --experimental-vm-modules
      - name: Dry-run scraper
        run: |
          DRY_RUN=true node src/index.js --parser=generic-news --seed-file=seeds-generic-news.txt --max-concurrency=1 | grep run_summary || true
      - name: Security audit (non-blocking)
        run: |
          npm audit --omit=dev --audit-level=moderate || echo "Non-blocking vulnerabilities"
          npx audit-ci --low || echo "Non-blocking low issues"
      - name: Docker build smoke
        run: |
          docker build -f docker/Dockerfile -t web-scraper:test .
          docker run --rm web-scraper:test --help || true
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  release:
    name: Release Tag & Image
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      - name: Install
        run: npm ci
      - name: Build image
        run: |
          docker build -f docker/Dockerfile -t ${{ github.repository }}:latest .
          docker build -f docker/Dockerfile -t ${{ github.repository }}:${{ github.sha }} .
      - name: Tag release
        run: |
          VERSION=$(node -p "require('./package.json').version")
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists, skipping push"
          else
            git tag -a v$VERSION -m "Release v$VERSION"
            git push origin v$VERSION
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
